#include "get_next_line.h"
#include "libft.h"

static char *test_strjoin(char *s1, char *s2)
{
	char	*fresh;
	size_t	len_sum;
	size_t	i;

	if (!s1)
	{
		s1 = (char *)malloc(sizeof(char) * 1);
		s1[0] = '\0';
	}
	if (!s1 || !s2)
		return (NULL);
	len_sum = (ft_strlen(s1) + ft_strlen(s2));
	fresh = ft_strnew(len_sum);
	if (!fresh)
		return (NULL);
	i = 0;
	while (*s1 != '\0')
		fresh[i++] = *s1++;
	while (*s2 != '\0')
		fresh[i++] = *s2++;
	fresh[i] = '\0';
	return (fresh);
}

static char *test_strchr(char *s, int c)
{
	int	i;

	i = 0;
	if (!s)
		return (0);
	if (c == '\0')
		return ((char *)&s[ft_strlen(s)]);
	while (s[i] != '\0')
	{
		if (s[i] == (char) c)
			return ((char *)&s[i]);
		i++;
	}
	return (0);
}

static char	*read_then_save(int fd, char *save)
{
	char	*buff;
	int		read_bytes;

	buff = malloc(sizeof(char) * (BUFF_SIZE + 1));
	if (!buff)
		return (NULL);
	read_bytes = 1;
	while (!test_strchr(save, '\n') && read_bytes != 0)
	{
		read_bytes = read(fd, buff, BUFF_SIZE);
		if (read_bytes == -1)
		{
			free(buff);
			return (0);
		}
		buff[read_bytes] = '\0';
		save = test_strjoin(save, buff);
	}
	free(buff);
	return (save);
}

static char	*get_line(char *save)
{
	int		i;
	char	*str;

	i = 0;
	if (!save[i])
		return (0);
	while (save[i] && save[i] != '\n')
		i++;
	str = (char *)malloc(sizeof(char) * (i + 2));
	if (!str)
		return (0);
	i = 0;
	while (save[i] && save[i] != '\n')
	{
		str[i] = save[i];
		i++;
	}
	if (save[i] == '\n')
	{
//		str[i] = save[i];
//		i++;
	}
	str[i] = '\0';
	return (str);
}

static char	*save_line(char *save)
{
	int		i;
	int		j;
	char	*str;

	i = 0;
	while (save[i] && save[i] != '\n')
		i++;
	if(!save[i])
	{
		free(save);
		return (NULL);
	}
	str = (char *)malloc(sizeof(char) * (ft_strlen(save) - i + 1));
	if (!str)
		return (0);
	i++;
	j = 0;
	while (save[i])
		str[j++] = save[i++];
	str[j] = '\0';
	free(save);
	return (str);
}

static int	nl_in_line(char *str)
{
	int	i;

	i = 0;
	if (!str)
		return (0);
	while (str[i])
	{
		if (str[i] == '\n')
			return (1);
		i++;
	}
	return (0);
}

int	get_next_line(const int fd, char **line)
{
	static char	*save[257];
	int			eof_check;
	
	not_eof = 1;
	if (fd < 0 || BUFF_SIZE <= 0 || fd > 256)
		return (-1);
	save[fd] = read_then_save(fd, save[fd]);
	if (!save[fd])
		return (-1);
	if (nl_in_line(save[fd]) == 0)
		not_eof = 0;
	*line = get_line(save[fd]);
	save[fd] = save_line(save[fd]);
	if (not_eof == 0)
//	if (nl_in_line(save[fd]) == 0)
		return (0);
	return (1);
}

/*int	get_next_line(const int fd, char **line)
{
	static char	*save[257];
	int			not_eof;
	
	not_eof = 1;
	if (fd < 0 || BUFF_SIZE <= 0 || fd > 256)
		return (-1);
	save[fd] = read_then_save(fd, save[fd]);
	if (!save[fd])
		return (-1);
	if (nl_in_line(save[fd]) == 0)
		not_eof = 0;
	*line = get_line(save[fd]);
	save[fd] = save_line(save[fd]);
	if (not_eof == 0)
//	if (nl_in_line(save[fd]) == 0)
		return (0);
	return (1);
}*/
